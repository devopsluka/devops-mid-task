version: '3.8'

# ============================================================================
# Docker Compose Configuration for golang-webapp.devops-mid-task.com
# ============================================================================
# This compose file deploys:
#   - Go Web Application (HTTPS backend)
#   - Nginx Reverse Proxy (SSL/TLS termination, HTTPâ†’HTTPS redirect)
#
# Usage:
#   docker-compose up -d              # Start all services
#   docker-compose down               # Stop all services
#   docker-compose logs -f            # View logs
#   docker-compose ps                 # Check status
# ============================================================================

services:
  # ========================================
  # Go Web Application Service
  # ========================================
  webapp:
    build:
      context: .
      dockerfile: Dockerfile
    image: mini-webapp:latest
    container_name: golang-webapp

    # Environment Variables
    environment:
      - API_VERSION=${API_VERSION:-1.0.0}
      - HTTPS_PORT=${WEBAPP_HTTPS_PORT:-8443}
      - TLS_CERT_FILE=/root/certs/server.crt
      - TLS_KEY_FILE=/root/certs/server.key

    # Networking
    networks:
      - webapp-network

    # Internal port only (nginx handles external access)
    expose:
      - "8443"

    # Restart Policy
    restart: unless-stopped

    # Health Check
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

    # Resource Limits (optional - uncomment for production)
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1.0'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.5'
    #       memory: 256M

    # Labels
    labels:
      com.devops-mid-task.service: "webapp"
      com.devops-mid-task.version: "1.0.0"

  # ========================================
  # Nginx Reverse Proxy Service
  # ========================================
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    image: mini-webapp-nginx:latest
    container_name: nginx-proxy

    # Exposed Ports
    ports:
      - "${HTTP_PORT:-80}:80"       # HTTP (redirects to HTTPS)
      - "${HTTPS_PORT:-443}:443"    # HTTPS (SSL/TLS termination)

    # Service Dependencies
    depends_on:
      webapp:
        condition: service_healthy

    # Networking
    networks:
      - webapp-network

    # Restart Policy
    restart: unless-stopped

    # Health Check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

    # Volumes
    volumes:
      # Persistent logs
      - ./logs/nginx:/var/log/nginx
      # Optional: Custom nginx config override
      # - ./nginx/nginx.conf:/etc/nginx/conf.d/webapp.conf:ro

    # Resource Limits (optional - uncomment for production)
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.5'
    #       memory: 256M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 128M

    # Labels
    labels:
      com.devops-mid-task.service: "nginx-proxy"
      com.devops-mid-task.version: "1.0.0"

# ========================================
# Networks
# ========================================
networks:
  webapp-network:
    driver: bridge
    labels:
      com.devops-mid-task.network: "main"

# ========================================
# Volumes (if needed for future use)
# ========================================
# volumes:
#   nginx-logs:
#     driver: local
